"use strict";
self["webpackHotUpdateteste_ds"]("stories-Button-stories",{

/***/ "./src/stories/Button.stories.tsx":
/*!****************************************!*\
  !*** ./src/stories/Button.stories.tsx ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ButtonAllVariants: () => (/* binding */ ButtonAllVariants),
/* harmony export */   ButtonDefault: () => (/* binding */ ButtonDefault),
/* harmony export */   ButtonWithIcon: () => (/* binding */ ButtonWithIcon),
/* harmony export */   ButtonWithTooltip: () => (/* binding */ ButtonWithTooltip),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components */ "./src/components/index.ts");
/* harmony import */ var _components_Button_Enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/Button/Enums */ "./src/components/Button/Enums.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");




const meta = {
  title: "Example/Button",
  component: _components__WEBPACK_IMPORTED_MODULE_0__.Button,
  parameters: {
    layout: "centered"
  },
  tags: ["autodocs"]
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
const ButtonDefault = {
  args: {
    label: "Button",
    variant: "primary"
  }
};
const ButtonWithIcon = {
  args: {
    label: "Button",
    icon: {
      name: "SpinnerIcon",
      side: "left",
      color: "white",
      stroke: 1.5
    }
  }
};
const ButtonAllVariants = () => {
  const availableVariants = Object.values(_components_Button_Enums__WEBPACK_IMPORTED_MODULE_1__.ButtonVariants);
  const availableThemes = Object.values(_components_Button_Enums__WEBPACK_IMPORTED_MODULE_1__.ButtonThemes);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
    className: "flex flex-col gap-8",
    children: availableThemes.map(theme => {
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
        className: "flex flex-col gap-2",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("h2", {
          children: theme
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
          className: "flex gap-2",
          children: availableVariants.map(variant => {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components__WEBPACK_IMPORTED_MODULE_0__.Button, {
              theme: theme,
              variant: variant,
              label: "Button"
            }, variant);
          })
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
          className: "flex gap-2",
          children: availableVariants.map(variant => {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components__WEBPACK_IMPORTED_MODULE_0__.Button, {
              theme: theme,
              variant: variant,
              label: "Button",
              isDisabled: true
            }, variant);
          })
        })]
      }, theme);
    })
  });
};
ButtonAllVariants.displayName = "ButtonAllVariants";
ButtonAllVariants.story = {
  name: "Variants"
};
const ButtonWithTooltip = {
  args: {
    label: "Button",
    tooltip: "This is a tooltip"
  }
};
ButtonDefault.parameters = {
  ...ButtonDefault.parameters,
  docs: {
    ...ButtonDefault.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    label: \"Button\",\n    variant: \"primary\"\n  }\n}",
      ...ButtonDefault.parameters?.docs?.source
    }
  }
};
ButtonWithIcon.parameters = {
  ...ButtonWithIcon.parameters,
  docs: {
    ...ButtonWithIcon.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    label: \"Button\",\n    icon: {\n      name: \"SpinnerIcon\",\n      side: \"left\",\n      color: \"white\",\n      stroke: 1.5\n    }\n  }\n}",
      ...ButtonWithIcon.parameters?.docs?.source
    }
  }
};
ButtonAllVariants.parameters = {
  ...ButtonAllVariants.parameters,
  docs: {
    ...ButtonAllVariants.parameters?.docs,
    source: {
      originalSource: "() => {\n  const availableVariants = Object.values(ButtonVariants);\n  const availableThemes = Object.values(ButtonThemes);\n  return <div className=\"flex flex-col gap-8\">\r\n      {availableThemes.map(theme => {\n      return <div key={theme} className=\"flex flex-col gap-2\">\r\n            <h2>{theme}</h2>\r\n            <div className=\"flex gap-2\">\r\n              {availableVariants.map(variant => {\n            return <Button key={variant} theme={theme} variant={variant} label=\"Button\" />;\n          })}\r\n            </div>\r\n            <div className=\"flex gap-2\">\r\n              {availableVariants.map(variant => {\n            return <Button key={variant} theme={theme} variant={variant} label=\"Button\" isDisabled />;\n          })}\r\n            </div>\r\n          </div>;\n    })}\r\n    </div>;\n}",
      ...ButtonAllVariants.parameters?.docs?.source
    }
  }
};
ButtonWithTooltip.parameters = {
  ...ButtonWithTooltip.parameters,
  docs: {
    ...ButtonWithTooltip.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    label: \"Button\",\n    tooltip: \"This is a tooltip\"\n  }\n}",
      ...ButtonWithTooltip.parameters?.docs?.source
    }
  }
};
const __namedExportsOrder = ["ButtonDefault", "ButtonWithIcon", "ButtonAllVariants", "ButtonWithTooltip"];

/***/ })

});